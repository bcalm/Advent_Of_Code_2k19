  /*Part_1 implementation
    const energy = calculateEnergy(positions.slice());
  */


/* For part_1 implementation finding energy for particular steps
const calculateEnergy = function (initialPosition) {
  let steps = 0;
  const moonsPosition = initialPosition.slice();

  while (steps < 1000) {
    for (let index = 0; index < moonsPosition.length; index++) {
      let moons = moonsPosition.slice();
      moons.splice(index, 1);
      moons[index] = moons.reduce(calculateVelocity, moonsPosition[index]);
      moonsPosition[index] = moons[index];
    }

    for (let index = 0; index < moonsPosition.length; index++) {
      moonsPosition[index].positions.x += moonsPosition[index].velocity.x;
      moonsPosition[index].positions.y += moonsPosition[index].velocity.y;
      moonsPosition[index].positions.z += moonsPosition[index].velocity.z;
    }

    steps++;
  }
  return moonsPosition.reduce(addEnergy, 0);
};



*/

// const positions = JSON.parse(fs.readFileSync('./moonsPosition.json', 'utf8'));

const calculateSteps = function (positions) {
  return steps;
};






const fs = require('fs');

const findCordVelocity = function (firstPosition, secondPosition) {
  if (firstPosition < secondPosition) return 1;
  if (firstPosition > secondPosition) return -1;
  return 0;
};

const calculateVelocity = function (moonPosition, newMoon) {
  moonPosition.velocity.x += findCordVelocity(moonPosition.positions.x, newMoon.positions.x);
  moonPosition.velocity.y += findCordVelocity(moonPosition.positions.y, newMoon.positions.y);
  moonPosition.velocity.z += findCordVelocity(moonPosition.positions.z, newMoon.positions.z);
  return moonPosition;
};

const compareMoonPosition = function (oldMoon, newMoon, axis) {
  let done = 0;
  for (let index = 0; index < newMoon.length; index++) {
    const isPositionSame = oldMoon[index].positions[axis] === newMoon[index].positions[axis];
    const isVelocitySame = oldMoon[index].velocity[axis] === newMoon[index].velocity[axis];
    done = isPositionSame && isVelocitySame ? ++done : done;
  }

  return done === 4;
};

const getRepeatedTime = function (positions, axis) {
  let steps = 1;
  const moonsPosition = JSON.parse(JSON.stringify(positions));

  while (true) {
    for (let index = 0; index < 4; index++) {
      moonsPosition.reduce(calculateVelocity, moonsPosition[index]);
    }
    // 113028
    for (let index = 0; index < 4; index++) {
      moonsPosition[index].positions.x += moonsPosition[index].velocity.x;
      moonsPosition[index].positions.y += moonsPosition[index].velocity.y;
      moonsPosition[index].positions.z += moonsPosition[index].velocity.z;
    }

    if (compareMoonPosition(positions, moonsPosition, axis)) {
      break;
    }
    steps++;
  }
  return steps;
};

const calculateSteps = function (positions) {
  const xPeriod = getRepeatedTime(positions, 'x');
  const yPeriod = getRepeatedTime(positions, 'y');
  const zPeriod = getRepeatedTime(positions, 'z');
  let result;
  const isSame = (period) => result % period !== 0;
  console.log(xPeriod, yPeriod, zPeriod);

  for (let i = 1; isSame(yPeriod) || isSame(zPeriod); i += 1) {
    console.log(result);

    result = i * xPeriod;
  }
  return result;
};

const main = function () {
  const positions = JSON.parse(fs.readFileSync('./moonsPosition.json', 'utf8'));
  const steps = calculateSteps(positions.slice());
  console.log(steps);
};

main();

